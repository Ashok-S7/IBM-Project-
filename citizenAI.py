# -*- coding: utf-8 -*-
"""Citizen.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jCGmqHzLcTDNQohPmdt36D7yHNGgRVa7
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Generation function
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# Application logic
def city_analysis(city_name):
    prompt = f"Provide a detailed analysis of {city_name} including:\n1. Crime Index and safety statistics\n2. Accident rates and traffic safety information\n3. Overall safety assessment\n\nCity: {city_name}\nAnalysis:"
    return generate_response(prompt, max_length=1000)

def citizen_interaction(query):
    prompt = f"As a government assistant, provide accurate and helpful information about the following citizen query related to public services, government policies, or civic issues:\n\nQuery: {query}\nResponse:"
    return generate_response(prompt, max_length=1000)

# Custom CSS for pro look
custom_css = """
body {font-family: 'Segoe UI', sans-serif;}
.gr-button {background: #1f6feb; color: white; border-radius: 8px;}
.gr-button:hover {background: #1554c0;}
.gr-textbox textarea {font-size: 16px;}
.tab-content {padding: 20px;}
.gr-box {border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.05);}
"""

# Gradio App
with gr.Blocks(css=custom_css, theme=gr.themes.Soft()) as app:
    gr.Markdown("""
        <div style='text-align:center'>
            <h1 style='font-size: 2.5em;'>üåÜ City Analysis & üèõÔ∏è Citizen Services AI</h1>
            <p style='font-size: 1.2em;'>Get crime stats, accident info, and public service insights for any city or civic query.</p>
        </div>
        <hr>
    """)

    with gr.Tabs():
        # City Analysis Tab
        with gr.TabItem("üìä City Analysis"):
            with gr.Row():
                with gr.Column(scale=1):
                    city_input = gr.Textbox(
                        label="Enter City Name",
                        placeholder="e.g., New York, London, Mumbai...",
                        lines=1
                    )
                    analyze_btn = gr.Button("üîç Analyze City")

                with gr.Column(scale=2):
                    city_output = gr.Textbox(
                        label="üßæ City Analysis Report",
                        lines=20,
                        interactive=False,
                        show_copy_button=True
                    )

            analyze_btn.click(city_analysis, inputs=city_input, outputs=city_output)

        # Citizen Services Tab
        with gr.TabItem("üí¨ Citizen Services"):
            with gr.Row():
                with gr.Column(scale=1):
                    citizen_query = gr.Textbox(
                        label="Ask a Public Services Question",
                        placeholder="e.g., How to apply for a driver's license in Mumbai?",
                        lines=4
                    )
                    query_btn = gr.Button("üì® Submit Query")

                with gr.Column(scale=2):
                    citizen_output = gr.Textbox(
                        label="üìò Government Assistant's Response",
                        lines=20,
                        interactive=False,
                        show_copy_button=True
                    )

            query_btn.click(citizen_interaction, inputs=citizen_query, outputs=citizen_output)

    gr.Markdown("""
        <hr>
        <div style='text-align:center; font-size: 0.9em;'>
            Developed with  using IBM Granite & Gradio<br>
            <a href='https://huggingface.co/ibm-granite/granite-3.2-2b-instruct' target='_blank'>Model Info</a> |
            <a href='https://gradio.app/' target='_blank'>Gradio</a>
        </div>
    """)

app.launch(share=True)